(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))o(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const u of i.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&o(u)}).observe(document,{childList:!0,subtree:!0});function r(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function o(s){if(s.ep)return;s.ep=!0;const i=r(s);fetch(s.href,i)}})();function f(e,t){return(...r)=>{const o=Object.assign(document.createElement(e),{...t,addContent:s=>(s&&(Array.isArray(s)?s.forEach(o.addContent):typeof s=="object"&&"appendChild"in s?o.appendChild(s):o instanceof HTMLInputElement?o.value+=s:o.innerText+=s),o),replaceContent:s=>{for(;o.firstChild;)o.removeChild(o.firstChild);return o instanceof HTMLInputElement&&(o.value=""),o.addContent(s)}});return o.addContent(r)}}const F={pageContainer:f("div",{className:"flex items-center my-4 mx-auto"})(),headerTitle:f("h1",{className:"text-2xl font-medium"})()};var S=(e=>(e.ExperimentList="ExperimentList",e.Settings="Settings",e.ExperimentConfig="ExperimentConfig",e.ExperimentBuilder="ExperimentBuilder",e.NotFound="NotFound",e))(S||{});const E={page:"ExperimentList",experimentId:null,githubToken:null,gistId:null,experimentList:[],gistFiles:{}};function jr(){const e=E.experimentList.find(r=>r.id===E.experimentId),t=f("div",{className:"flex flex-col space-y-4"})(...e?e.variants.map(at):[]);return f("div",{className:"flex flex-col space-y-8"})(f("div",{className:"flex justify-between p-8 space-x-8 bg-stone-800 text-white text-xl"})(f("span")(e==null?void 0:e.name),f("span")(e==null?void 0:e.url),f("span")(e==null?void 0:e.id)),f("div",{className:"flex flex-col"})(f("iframe",{src:e==null?void 0:e.url,height:"256"})()),t,f("button",{className:"btn-primary",onclick:()=>t.addContent(at({id:"",slicePercentage:0}))})("Add New Variant"),f("button",{className:"btn-secondary",onclick:()=>L(S.ExperimentConfig,E.experimentId??"")})("Back"))}function at(e){return f("div",{className:"flex px-4 py-2 space-x-4 bg-stone-100 border-2 rounded"})(f("div",{className:"flex flex-col"})(f("label",{className:"font-bold"})("Analytics ID"),f("input",{className:"input"})(e.id)),f("div",{className:"flex flex-col"})(f("label",{className:"font-bold"})("Slice Percentage"),f("input",{className:"input"})(String(e.slicePercentage))),f("button",{className:"btn-primary"})("Edit Elements"),f("button",{className:"btn-success"})("Save"),f("button",{className:"btn-danger"})("Delete"))}function $(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&"version"in process?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}const $r=Object.freeze(Object.defineProperty({__proto__:null,getUserAgent:$},Symbol.toStringTag,{value:"Module"}));var _e=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Ge(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function J(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var r=function o(){return this instanceof o?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};r.prototype=t.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(e).forEach(function(o){var s=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(r,o,s.get?s:{enumerable:!0,get:function(){return e[o]}})}),r}var ae={exports:{}},qr=Gt;function Gt(e,t,r,o){if(typeof r!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce(function(s,i){return Gt.bind(null,e,i,s,o)},r)():Promise.resolve().then(function(){return e.registry[t]?e.registry[t].reduce(function(s,i){return i.hook.bind(null,s,o)},r)():r(o)})}var Nr=Wr;function Wr(e,t,r,o){var s=o;e.registry[r]||(e.registry[r]=[]),t==="before"&&(o=function(i,u){return Promise.resolve().then(s.bind(null,u)).then(i.bind(null,u))}),t==="after"&&(o=function(i,u){var h;return Promise.resolve().then(i.bind(null,u)).then(function(g){return h=g,s(h,u)}).then(function(){return h})}),t==="error"&&(o=function(i,u){return Promise.resolve().then(i.bind(null,u)).catch(function(h){return s(h,u)})}),e.registry[r].push({hook:o,orig:s})}var Hr=Br;function Br(e,t,r){if(e.registry[t]){var o=e.registry[t].map(function(s){return s.orig}).indexOf(r);o!==-1&&e.registry[t].splice(o,1)}}var Rt=qr,Mr=Nr,Vr=Hr,ct=Function.bind,ut=ct.bind(ct);function Ft(e,t,r){var o=ut(Vr,null).apply(null,r?[t,r]:[t]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(function(s){var i=r?[t,s,r]:[t,s];e[s]=e.api[s]=ut(Mr,null).apply(null,i)})}function zr(){var e="h",t={registry:{}},r=Rt.bind(null,t,e);return Ft(r,t,e),r}function Ct(){var e={registry:{}},t=Rt.bind(null,e);return Ft(t,e),t}var lt=!1;function Q(){return lt||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),lt=!0),Ct()}Q.Singular=zr.bind();Q.Collection=Ct.bind();ae.exports=Q;ae.exports.Hook=Q;ae.exports.Singular=Q.Singular;var Kr=ae.exports.Collection=Q.Collection;/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function pt(e){return Object.prototype.toString.call(e)==="[object Object]"}function Ut(e){var t,r;return pt(e)===!1?!1:(t=e.constructor,t===void 0?!0:(r=t.prototype,!(pt(r)===!1||r.hasOwnProperty("isPrototypeOf")===!1)))}var Jr="9.0.1",Qr=`octokit-endpoint.js/${Jr} ${$()}`,Yr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Qr},mediaType:{format:""}};function Xr(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Dt(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(o=>{Ut(t[o])?o in e?r[o]=Dt(e[o],t[o]):Object.assign(r,{[o]:t[o]}):Object.assign(r,{[o]:t[o]})}),r}function dt(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function ve(e,t,r){var s;if(typeof t=="string"){let[i,u]=t.split(" ");r=Object.assign(u?{method:i,url:u}:{url:i},r)}else r=Object.assign({},t);r.headers=Xr(r.headers),dt(r),dt(r.headers);const o=Dt(e||{},r);return r.url==="/graphql"&&(e&&((s=e.mediaType.previews)!=null&&s.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function Zr(e,t){const r=/\?/.test(e)?"&":"?",o=Object.keys(t);return o.length===0?e:e+r+o.map(s=>s==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${s}=${encodeURIComponent(t[s])}`).join("&")}var es=/\{[^}]+\}/g;function ts(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function rs(e){const t=e.match(es);return t?t.map(ts).reduce((r,o)=>r.concat(o),[]):[]}function ht(e,t){return Object.keys(e).filter(r=>!t.includes(r)).reduce((r,o)=>(r[o]=e[o],r),{})}function It(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function V(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function ee(e,t,r){return t=e==="+"||e==="#"?It(t):V(t),r?V(r)+"="+t:t}function M(e){return e!=null}function Ee(e){return e===";"||e==="&"||e==="?"}function ss(e,t,r,o){var s=e[r],i=[];if(M(s)&&s!=="")if(typeof s=="string"||typeof s=="number"||typeof s=="boolean")s=s.toString(),o&&o!=="*"&&(s=s.substring(0,parseInt(o,10))),i.push(ee(t,s,Ee(t)?r:""));else if(o==="*")Array.isArray(s)?s.filter(M).forEach(function(u){i.push(ee(t,u,Ee(t)?r:""))}):Object.keys(s).forEach(function(u){M(s[u])&&i.push(ee(t,s[u],u))});else{const u=[];Array.isArray(s)?s.filter(M).forEach(function(h){u.push(ee(t,h))}):Object.keys(s).forEach(function(h){M(s[h])&&(u.push(V(h)),u.push(ee(t,s[h].toString())))}),Ee(t)?i.push(V(r)+"="+u.join(",")):u.length!==0&&i.push(u.join(","))}else t===";"?M(s)&&i.push(V(r)):s===""&&(t==="&"||t==="?")?i.push(V(r)+"="):s===""&&i.push("");return i}function os(e){return{expand:ns.bind(null,e)}}function ns(e,t){var r=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,s,i){if(s){let h="";const g=[];if(r.indexOf(s.charAt(0))!==-1&&(h=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(b){var _=/([^:\*]*)(?::(\d+)|(\*))?/.exec(b);g.push(ss(t,h,_[1],_[2]||_[3]))}),h&&h!=="+"){var u=",";return h==="?"?u="&":h!=="#"&&(u=h),(g.length!==0?h:"")+g.join(u)}else return g.join(",")}else return It(i)})}function xt(e){var _;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),s,i=ht(e,["method","baseUrl","url","headers","request","mediaType"]);const u=rs(r);r=os(r).expand(i),/^http/.test(r)||(r=e.baseUrl+r);const h=Object.keys(e).filter(w=>u.includes(w)).concat("baseUrl"),g=ht(i,h);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(w=>w.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(_=e.mediaType.previews)!=null&&_.length)){const w=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=w.concat(e.mediaType.previews).map(R=>{const C=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${R}-preview${C}`}).join(",")}return["GET","HEAD"].includes(t)?r=Zr(r,g):"data"in g?s=g.data:Object.keys(g).length&&(s=g),!o["content-type"]&&typeof s<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof s>"u"&&(s=""),Object.assign({method:t,url:r,headers:o},typeof s<"u"?{body:s}:null,e.request?{request:e.request}:null)}function is(e,t,r){return xt(ve(e,t,r))}function Lt(e,t){const r=ve(e,t),o=is.bind(null,r);return Object.assign(o,{DEFAULTS:r,defaults:Lt.bind(null,r),merge:ve.bind(null,r),parse:xt})}var as=Lt(null,Yr);class gt extends Error{constructor(t){super(t),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var Re={exports:{}},cs=jt;function jt(e,t){if(e&&t)return jt(e)(t);if(typeof e!="function")throw new TypeError("need wrapper function");return Object.keys(e).forEach(function(o){r[o]=e[o]}),r;function r(){for(var o=new Array(arguments.length),s=0;s<o.length;s++)o[s]=arguments[s];var i=e.apply(this,o),u=o[o.length-1];return typeof i=="function"&&i!==u&&Object.keys(u).forEach(function(h){i[h]=u[h]}),i}}var $t=cs;Re.exports=$t(ie);Re.exports.strict=$t(qt);ie.proto=ie(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return ie(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return qt(this)},configurable:!0})});function ie(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function qt(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}var us=Re.exports;const Nt=Ge(us);var ls=Nt(e=>console.warn(e)),ps=Nt(e=>console.warn(e)),H=class extends Error{constructor(e,t,r){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t;let o;"headers"in r&&typeof r.headers<"u"&&(o=r.headers),"response"in r&&(this.response=r.response,o=r.response.headers);const s=Object.assign({},r.request);r.request.headers.authorization&&(s.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=s,Object.defineProperty(this,"code",{get(){return ls(new gt("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t}}),Object.defineProperty(this,"headers",{get(){return ps(new gt("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),o||{}}})}},ds="8.1.3";function hs(e){return e.arrayBuffer()}function mt(e){var h,g,b;const t=e.request&&e.request.log?e.request.log:console,r=((h=e.request)==null?void 0:h.parseSuccessResponseBody)!==!1;(Ut(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let o={},s,i,{fetch:u}=globalThis;if((g=e.request)!=null&&g.fetch&&(u=e.request.fetch),!u)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return u(e.url,{method:e.method,body:e.body,headers:e.headers,signal:(b=e.request)==null?void 0:b.signal,...e.body&&{duplex:"half"}}).then(async _=>{i=_.url,s=_.status;for(const w of _.headers)o[w[0]]=w[1];if("deprecation"in o){const w=o.link&&o.link.match(/<([^>]+)>; rel="deprecation"/),R=w&&w.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${o.sunset}${R?`. See ${R}`:""}`)}if(!(s===204||s===205)){if(e.method==="HEAD"){if(s<400)return;throw new H(_.statusText,s,{response:{url:i,status:s,headers:o,data:void 0},request:e})}if(s===304)throw new H("Not modified",s,{response:{url:i,status:s,headers:o,data:await be(_)},request:e});if(s>=400){const w=await be(_);throw new H(gs(w),s,{response:{url:i,status:s,headers:o,data:w},request:e})}return r?await be(_):_.body}}).then(_=>({status:s,url:i,headers:o,data:_})).catch(_=>{if(_ instanceof H)throw _;if(_.name==="AbortError")throw _;let w=_.message;throw _ instanceof TypeError&&"cause"in _&&typeof _.cause=="string"&&(w=_.cause),new H(w,500,{request:e})})}async function be(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json():!t||/^text\/|charset=utf-8$/.test(t)?e.text():hs(e)}function gs(e){return typeof e=="string"?e:"message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}`:e.message:`Unknown error: ${JSON.stringify(e)}`}function ke(e,t){const r=e.defaults(t);return Object.assign(function(s,i){const u=r.merge(s,i);if(!u.request||!u.request.hook)return mt(r.parse(u));const h=(g,b)=>mt(r.parse(r.merge(g,b)));return Object.assign(h,{endpoint:r,defaults:ke.bind(null,r)}),u.request.hook(h,u)},{endpoint:r,defaults:ke.bind(null,r)})}var P=ke(as,{headers:{"user-agent":`octokit-request.js/${ds} ${$()}`}}),ms="7.0.2";function fs(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var Ts=class extends Error{constructor(e,t,r){super(fs(r)),this.request=e,this.headers=t,this.response=r,this.name="GraphqlResponseError",this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},_s=["method","baseUrl","url","headers","request","query","mediaType"],Es=["query","method","url"],ft=/\/api\/v3\/?$/;function bs(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const u in r)if(Es.includes(u))return Promise.reject(new Error(`[@octokit/graphql] "${u}" cannot be used as variable name`))}const o=typeof t=="string"?Object.assign({query:t},r):t,s=Object.keys(o).reduce((u,h)=>_s.includes(h)?(u[h]=o[h],u):(u.variables||(u.variables={}),u.variables[h]=o[h],u),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return ft.test(i)&&(s.url=i.replace(ft,"/api/graphql")),e(s).then(u=>{if(u.data.errors){const h={};for(const g of Object.keys(u.headers))h[g]=u.headers[g];throw new Ts(s,h,u.data)}return u.data.data})}function Fe(e,t){const r=e.defaults(t);return Object.assign((s,i)=>bs(r,s,i),{defaults:Fe.bind(null,r),endpoint:r.endpoint})}Fe(P,{headers:{"user-agent":`octokit-graphql.js/${ms} ${$()}`},method:"POST",url:"/graphql"});function ws(e){return Fe(e,{method:"POST",url:"/graphql"})}var ys=/^v1\./,vs=/^ghs_/,ks=/^ghu_/;async function Ss(e){const t=e.split(/\./).length===3,r=ys.test(e)||vs.test(e),o=ks.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":o?"user-to-server":"oauth"}}function As(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Os(e,t,r,o){const s=t.endpoint.merge(r,o);return s.headers.authorization=As(e),t(s)}var Ps=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(Ss.bind(null,t),{hook:Os.bind(null,t)})},Tt="5.0.1",K,Wt=(K=class{static defaults(t){return class extends this{constructor(...o){const s=o[0]||{};if(typeof t=="function"){super(t(s));return}super(Object.assign({},t,s,s.userAgent&&t.userAgent?{userAgent:`${s.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var s;const r=this.plugins;return s=class extends this{},s.plugins=r.concat(t.filter(u=>!r.includes(u))),s}constructor(t={}){const r=new Kr,o={baseUrl:P.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=[t.userAgent,`octokit-core.js/${Tt} ${$()}`].filter(Boolean).join(" "),t.baseUrl&&(o.baseUrl=t.baseUrl),t.previews&&(o.mediaType.previews=t.previews),t.timeZone&&(o.headers["time-zone"]=t.timeZone),this.request=P.defaults(o),this.graphql=ws(this.request).defaults(o),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},t.log),this.hook=r,t.authStrategy){const{authStrategy:i,...u}=t,h=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:u},t.auth));r.wrap("request",h.hook),this.auth=h}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=Ps(t.auth);r.wrap("request",i.hook),this.auth=i}this.constructor.plugins.forEach(i=>{Object.assign(this,i(this,t))})}},K.VERSION=Tt,K.plugins=[],K);const Gs=Object.freeze(Object.defineProperty({__proto__:null,Octokit:Wt},Symbol.toStringTag,{value:"Module"}));var Rs="9.0.0";function Fs(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const r=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],u=e.data[i];return e.data=u,typeof r<"u"&&(e.data.incomplete_results=r),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=s,e}function Ce(e,t,r){const o=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),s=typeof t=="function"?t:e.request,i=o.method,u=o.headers;let h=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!h)return{done:!0};try{const g=await s({method:i,url:h,headers:u}),b=Fs(g);return h=((b.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:b}}catch(g){if(g.status!==409)throw g;return h="",{value:{status:200,headers:{},data:[]}}}}})}}function Ht(e,t,r,o){return typeof r=="function"&&(o=r,r=void 0),Bt(e,[],Ce(e,t,r)[Symbol.asyncIterator](),o)}function Bt(e,t,r,o){return r.next().then(s=>{if(s.done)return t;let i=!1;function u(){i=!0}return t=t.concat(o?o(s.value,u):s.value.data),i?t:Bt(e,t,r,o)})}Object.assign(Ht,{iterator:Ce});function Mt(e){return{paginate:Object.assign(Ht.bind(null,e),{iterator:Ce.bind(null,e)})}}Mt.VERSION=Rs;var Cs=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,Us=class extends Error{constructor(e,t){super(Cs(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,this.name="MissingCursorChangeError",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Ds=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,this.name="MissingPageInfo",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Is=e=>Object.prototype.toString.call(e)==="[object Object]";function Vt(e){const t=zt(e,"pageInfo");if(t.length===0)throw new Ds(e);return t}var zt=(e,t,r=[])=>{for(const o of Object.keys(e)){const s=[...r,o],i=e[o];if(i.hasOwnProperty(t))return s;if(Is(i)){const u=zt(i,t,s);if(u.length>0)return u}}return[]},te=(e,t)=>t.reduce((r,o)=>r[o],e),we=(e,t,r)=>{const o=t[t.length-1],s=[...t].slice(0,-1),i=te(e,s);typeof r=="function"?i[o]=r(i[o]):i[o]=r},xs=e=>{const t=Vt(e);return{pathInQuery:t,pageInfo:te(e,[...t,"pageInfo"])}},Kt=e=>e.hasOwnProperty("hasNextPage"),Ls=e=>Kt(e)?e.endCursor:e.startCursor,js=e=>Kt(e)?e.hasNextPage:e.hasPreviousPage,Jt=e=>(t,r={})=>{let o=!0,s={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(t,s),u=xs(i),h=Ls(u.pageInfo);if(o=js(u.pageInfo),o&&h===s.cursor)throw new Us(u,h);return s={...s,cursor:h},{done:!1,value:i}}})}},$s=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const r=Vt(e),o=[...r,"nodes"],s=te(t,o);s&&we(e,o,g=>[...g,...s]);const i=[...r,"edges"],u=te(t,i);u&&we(e,i,g=>[...g,...u]);const h=[...r,"pageInfo"];return we(e,h,te(t,h)),e},qs=e=>{const t=Jt(e);return async(r,o={})=>{let s={};for await(const i of t(r,o))s=$s(s,i);return s}};function Ns(e){return e.graphql,{graphql:Object.assign(e.graphql,{paginate:Object.assign(qs(e),{iterator:Jt(e)})})}}var Ws="10.0.0",Hs={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotForBusinessSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotForBusinessSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatAssignmentDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Bs=Hs,re=new Map;for(const[e,t]of Object.entries(Bs))for(const[r,o]of Object.entries(t)){const[s,i,u]=o,[h,g]=s.split(/ /),b=Object.assign({method:h,url:g},i);re.has(e)||re.set(e,new Map),re.get(e).set(r,{scope:e,methodName:r,endpointDefaults:b,decorations:u})}var Ms={get({octokit:e,scope:t,cache:r},o){if(r[o])return r[o];const{decorations:s,endpointDefaults:i}=re.get(t).get(o);return s?r[o]=zs(e,t,o,i,s):r[o]=e.request.defaults(i),r[o]}};function Vs(e){const t={};for(const r of re.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Ms);return t}function zs(e,t,r,o,s){const i=e.request.defaults(o);function u(...h){let g=i.endpoint.merge(...h);if(s.mapToData)return g=Object.assign({},g,{data:g[s.mapToData],[s.mapToData]:void 0}),i(g);if(s.renamed){const[b,_]=s.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${b}.${_}()`)}if(s.deprecated&&e.log.warn(s.deprecated),s.renamedParameters){const b=i.endpoint.merge(...h);for(const[_,w]of Object.entries(s.renamedParameters))_ in b&&(e.log.warn(`"${_}" parameter is deprecated for "octokit.${t}.${r}()". Use "${w}" instead`),w in b||(b[w]=b[_]),delete b[_]);return i(b)}return i(...h)}return Object.assign(u,i)}function Qt(e){return{rest:Vs(e)}}Qt.VERSION=Ws;var Yt={exports:{}};(function(e,t){(function(r,o){e.exports=o()})(_e,function(){var r=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof _e<"u"?_e:typeof self<"u"?self:{};function o(T){return T&&T.default||T}var s=function(T,a,n={}){var c,l,p;for(c in a)p=a[c],n[c]=(l=T[c])!=null?l:p;return n},i=function(T,a,n={}){var c,l;for(c in T)l=T[c],a[c]!==void 0&&(n[c]=l);return n},u={load:s,overwrite:i},h;h=class{constructor(a,n){this.incr=a,this.decr=n,this._first=null,this._last=null,this.length=0}push(a){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:a,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var a;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),a=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,a}first(){if(this._first!=null)return this._first.value}getArray(){var a,n,c;for(a=this._first,c=[];a!=null;)c.push((n=a,a=a.next,n.value));return c}forEachShift(a){var n;for(n=this.shift();n!=null;)a(n),n=this.shift()}debug(){var a,n,c,l,p;for(a=this._first,p=[];a!=null;)p.push((n=a,a=a.next,{value:n.value,prev:(c=n.prev)!=null?c.value:void 0,next:(l=n.next)!=null?l.value:void 0}));return p}};var g=h,b;b=class{constructor(a){if(this.instance=a,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,c)=>this._addListener(n,"many",c),this.instance.once=(n,c)=>this._addListener(n,"once",c),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(a,n,c){var l;return(l=this._events)[a]==null&&(l[a]=[]),this._events[a].push({cb:c,status:n}),this.instance}listenerCount(a){return this._events[a]!=null?this._events[a].length:0}async trigger(a,...n){var c,l;try{return a!=="debug"&&this.trigger("debug",`Event triggered: ${a}`,n),this._events[a]==null?void 0:(this._events[a]=this._events[a].filter(function(p){return p.status!=="none"}),l=this._events[a].map(async p=>{var d,m;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return m=typeof p.cb=="function"?p.cb(...n):void 0,typeof(m!=null?m.then:void 0)=="function"?await m:m}catch(y){return d=y,this.trigger("error",d),null}}}),(await Promise.all(l)).find(function(p){return p!=null}))}catch(p){return c=p,this.trigger("error",c),null}}};var _=b,w,R,C;w=g,R=_,C=class{constructor(a){this.Events=new R(this),this._length=0,this._lists=(function(){var n,c,l;for(l=[],n=1,c=a;1<=c?n<=c:n>=c;1<=c?++n:--n)l.push(new w(()=>this.incr(),()=>this.decr()));return l}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(a){return this._lists[a.options.priority].push(a)}queued(a){return a!=null?this._lists[a].length:this._length}shiftAll(a){return this._lists.forEach(function(n){return n.forEachShift(a)})}getFirst(a=this._lists){var n,c,l;for(n=0,c=a.length;n<c;n++)if(l=a[n],l.length>0)return l;return[]}shiftLastFrom(a){return this.getFirst(this._lists.slice(a).reverse()).shift()}};var j=C,U;U=class extends Error{};var G=U,v,k,D,Y,W;Y=10,k=5,W=u,v=G,D=class{constructor(a,n,c,l,p,d,m,y){this.task=a,this.args=n,this.rejectOnDrop=p,this.Events=d,this._states=m,this.Promise=y,this.options=W.load(c,l),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===l.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((A,O)=>{this._resolve=A,this._reject=O}),this.retryCount=0}_sanitizePriority(a){var n;return n=~~a!==a?k:a,n<0?0:n>Y-1?Y-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:a,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(a??new v(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(a){var n;if(n=this._states.jobStatus(this.options.id),!(n===a||a==="DONE"&&n===null))throw new v(`Invalid job status ${n}, expected ${a}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(a,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:a,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(a,n,c,l){var p,d,m;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",d);try{if(m=await(a!=null?a.schedule(this.options,this.task,...this.args):this.task(...this.args)),n())return this.doDone(d),await l(this.options,d),this._assertStatus("DONE"),this._resolve(m)}catch(y){return p=y,this._onFailure(p,d,n,c,l)}}doExpire(a,n,c){var l,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},l=new v(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(l,p,a,n,c)}async _onFailure(a,n,c,l,p){var d,m;if(c())return d=await this.Events.trigger("failed",a,n),d!=null?(m=~~d,this.Events.trigger("retry",`Retrying ${this.options.id} after ${m} ms`,n),this.retryCount++,l(m)):(this.doDone(n),await p(this.options,n),this._assertStatus("DONE"),this._reject(a))}doDone(a){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",a)}};var X=D,de,xe,he;he=u,de=G,xe=class{constructor(a,n,c){this.instance=a,this.storeOptions=n,this.clientId=this.instance._randomIndex(),he.load(c,c,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var a;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(a=this.heartbeat=setInterval(()=>{var n,c,l,p,d;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:l,reservoir:d}=this.storeOptions,this._lastReservoirIncrease=p,c=l!=null?Math.min(n,l-d):n,c>0))return this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?a.unref():void 0:clearInterval(this.heartbeat)}async __publish__(a){return await this.yieldLoop(),this.instance.Events.trigger("message",a.toString())}async __disconnect__(a){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(a=0){return new this.Promise(function(n,c){return setTimeout(n,a)})}computePenalty(){var a;return(a=this.storeOptions.penalty)!=null?a:15*this.storeOptions.minTime||5e3}async __updateSettings__(a){return await this.yieldLoop(),he.overwrite(a,a,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(a){return await this.yieldLoop(),this._nextRequest+this.timeout<a}computeCapacity(){var a,n;return{maxConcurrent:a,reservoir:n}=this.storeOptions,a!=null&&n!=null?Math.min(a-this._running,n):a!=null?a-this._running:n??null}conditionsCheck(a){var n;return n=this.computeCapacity(),n==null||a<=n}async __incrementReservoir__(a){var n;return await this.yieldLoop(),n=this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity()),n}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(a){return this._unblockTime>=a}check(a,n){return this.conditionsCheck(a)&&this._nextRequest-n<=0}async __check__(a){var n;return await this.yieldLoop(),n=Date.now(),this.check(a,n)}async __register__(a,n,c){var l,p;return await this.yieldLoop(),l=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),p=Math.max(this._nextRequest-l,0),this._nextRequest=l+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(a,n){var c,l,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new de(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return l=Date.now(),p=this.storeOptions.highWater!=null&&a===this.storeOptions.highWater&&!this.check(n,l),c=this.strategyIsBlock()&&(p||this.isBlocked(l)),c&&(this._unblockTime=l+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:c,strategy:this.storeOptions.strategy}}async __free__(a,n){return await this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var Ar=xe,Le,je;Le=G,je=class{constructor(a){this.status=a,this._jobs={},this.counts=this.status.map(function(){return 0})}next(a){var n,c;if(n=this._jobs[a],c=n+1,n!=null&&c<this.status.length)return this.counts[n]--,this.counts[c]++,this._jobs[a]++;if(n!=null)return this.counts[n]--,delete this._jobs[a]}start(a){var n;return n=0,this._jobs[a]=n,this.counts[n]++}remove(a){var n;return n=this._jobs[a],n!=null&&(this.counts[n]--,delete this._jobs[a]),n!=null}jobStatus(a){var n;return(n=this.status[this._jobs[a]])!=null?n:null}statusJobs(a){var n,c,l,p,d;if(a!=null){if(c=this.status.indexOf(a),c<0)throw new Le(`status must be one of ${this.status.join(", ")}`);l=this._jobs,p=[];for(n in l)d=l[n],d===c&&p.push(n);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((a,n,c)=>(a[this.status[c]]=n,a),{})}};var Or=je,$e,qe;$e=g,qe=class{constructor(a,n){this.schedule=this.schedule.bind(this),this.name=a,this.Promise=n,this._running=0,this._queue=new $e}isEmpty(){return this._queue.length===0}async _tryToRun(){var a,n,c,l,p,d,m;if(this._running<1&&this._queue.length>0)return this._running++,{task:m,args:a,resolve:p,reject:l}=this._queue.shift(),n=await async function(){try{return d=await m(...a),function(){return p(d)}}catch(y){return c=y,function(){return l(c)}}}(),this._running--,this._tryToRun(),n()}schedule(a,...n){var c,l,p;return p=l=null,c=new this.Promise(function(d,m){return p=d,l=m}),this._queue.push({task:a,args:n,resolve:p,reject:l}),this._tryToRun(),c}};var Pr=qe,Ne="2.19.5",Gr={version:Ne},Rr=Object.freeze({version:Ne,default:Gr}),We=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),He=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Fr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Be,Me,Ve,ze,Ke,ne;ne=u,Be=_,ze=We,Ve=He,Ke=Fr,Me=(function(){class T{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,ne.load(this.limiterOptions,this.defaults,this),this.Events=new Be(this),this.instances={},this.Bottleneck=nt,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new ze(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new Ve(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var c;return(c=this.instances[n])!=null?c:(()=>{var l;return l=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",l,n),l})()}async deleteKey(n=""){var c,l;return l=this.instances[n],this.connection&&(c=await this.connection.__runCommand__(["del",...Ke.allKeys(`${this.id}-${n}`)])),l!=null&&(delete this.instances[n],await l.disconnect()),l!=null||c>0}limiters(){var n,c,l,p;c=this.instances,l=[];for(n in c)p=c[n],l.push({key:n,limiter:p});return l}keys(){return Object.keys(this.instances)}async clusterKeys(){var n,c,l,p,d,m,y,A,O;if(this.connection==null)return this.Promise.resolve(this.keys());for(m=[],n=null,O=`b_${this.id}-`.length,c=9;n!==0;)for([A,l]=await this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~A,p=0,y=l.length;p<y;p++)d=l[p],m.push(d.slice(O,-c));return m}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(async()=>{var c,l,p,d,m,y;m=Date.now(),p=this.instances,d=[];for(l in p){y=p[l];try{await y._store.__groupCheck__(m)?d.push(this.deleteKey(l)):d.push(void 0)}catch(A){c=A,d.push(y.Events.trigger("error",c))}}return d},this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(ne.overwrite(n,this.defaults,this),ne.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var c;if(!this.sharedConnection)return(c=this.connection)!=null?c.disconnect(n):void 0}}return T.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},T}).call(r);var Cr=Me,Je,Qe,Ye;Ye=u,Qe=_,Je=(function(){class T{constructor(n={}){this.options=n,Ye.load(this.options,this.defaults,this),this.Events=new Qe(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,c)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var c;return this._arr.push(n),c=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),c}}return T.prototype.defaults={maxTime:null,maxSize:null,Promise},T}).call(r);var Ur=Je,Dr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Ir=o(Rr),Xe,Ze,ge,me,et,fe,tt,rt,st,Te,I,ot=[].splice;fe=10,Ze=5,I=u,tt=j,me=X,et=Ar,rt=Dr,ge=_,st=Or,Te=Pr,Xe=(function(){class T{constructor(n={},...c){var l,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,c),I.load(n,this.instanceDefaults,this),this._queues=new tt(fe),this._scheduled={},this._states=new st(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new ge(this),this._submitLock=new Te("submit",this.Promise),this._registerLock=new Te("register",this.Promise),p=I.load(n,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return l=I.load(n,this.redisStoreDefaults,{}),new rt(this,p,l);if(this.datastore==="local")return l=I.load(n,this.localStoreDefaults,{}),new et(this,p,l);throw new T.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.ref=="function"?d.ref():void 0}),this._queues.on("zero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.unref=="function"?d.unref():void 0})}_validateOptions(n,c){if(!(n!=null&&typeof n=="object"&&c.length===0))throw new T.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}async _free(n,c,l,p){var d,m;try{if({running:m}=await this._store.__free__(n,l.weight),this.Events.trigger("debug",`Freed ${l.id}`,p),m===0&&this.empty())return this.Events.trigger("idle")}catch(y){return d=y,this.Events.trigger("error",d)}}_run(n,c,l){var p,d,m;return c.doRun(),p=this._clearGlobalState.bind(this,n),m=this._run.bind(this,n,c),d=this._free.bind(this,n,c),this._scheduled[n]={timeout:setTimeout(()=>c.doExecute(this._limiter,p,m,d),l),expiration:c.options.expiration!=null?setTimeout(function(){return c.doExpire(p,m,d)},l+c.options.expiration):void 0,job:c}}_drainOne(n){return this._registerLock.schedule(()=>{var c,l,p,d,m;return this.queued()===0?this.Promise.resolve(null):(m=this._queues.getFirst(),{options:d,args:c}=p=m.first(),n!=null&&d.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${d.id}`,{args:c,options:d}),l=this._randomIndex(),this._store.__register__(l,d.weight,d.expiration).then(({success:y,wait:A,reservoir:O})=>{var Z;return this.Events.trigger("debug",`Drained ${d.id}`,{success:y,args:c,options:d}),y?(m.shift(),Z=this.empty(),Z&&this.Events.trigger("empty"),O===0&&this.Events.trigger("depleted",Z),this._run(l,p,A),this.Promise.resolve(d.weight)):this.Promise.resolve(null)})))})}_drainAll(n,c=0){return this._drainOne(n).then(l=>{var p;return l!=null?(p=n!=null?n-l:n,this._drainAll(p,c+l)):this.Promise.resolve(c)}).catch(l=>this.Events.trigger("error",l))}_dropAllQueued(n){return this._queues.shiftAll(function(c){return c.doDrop({message:n})})}stop(n={}){var c,l;return n=I.load(n,this.stopDefaults),l=p=>{var d;return d=()=>{var m;return m=this._states.counts,m[0]+m[1]+m[2]+m[3]===p},new this.Promise((m,y)=>d()?m():this.on("done",()=>{if(d())return this.removeAllListeners("done"),m()}))},c=n.dropWaitingJobs?(this._run=function(p,d){return d.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,d,m;d=this._scheduled;for(p in d)m=d[p],this.jobStatus(m.job.options.id)==="RUNNING"&&(clearTimeout(m.timeout),clearTimeout(m.expiration),m.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),l(0)}))):this.schedule({priority:fe-1,weight:0},()=>l(1)),this._receive=function(p){return p._reject(new T.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new T.prototype.BottleneckError("stop() has already been called")),c}async _addToQueue(n){var c,l,p,d,m,y,A;({args:c,options:d}=n);try{({reachedHWM:m,blocked:l,strategy:A}=await this._store.__submit__(this.queued(),d.weight))}catch(O){return p=O,this.Events.trigger("debug",`Could not queue ${d.id}`,{args:c,options:d,error:p}),n.doDrop({error:p}),!1}return l?(n.doDrop(),!0):m&&(y=A===T.prototype.strategy.LEAK?this._queues.shiftLastFrom(d.priority):A===T.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(d.priority+1):A===T.prototype.strategy.OVERFLOW?n:void 0,y!=null&&y.doDrop(),y==null||A===T.prototype.strategy.OVERFLOW)?(y==null&&n.doDrop(),m):(n.doQueue(m,l),this._queues.push(n),await this._drainAll(),m)}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new T.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var c,l,p,d,m,y,A;return typeof n[0]=="function"?(m=n,[l,...n]=m,[c]=ot.call(n,-1),d=I.load({},this.jobDefaults)):(y=n,[d,l,...n]=y,[c]=ot.call(n,-1),d=I.load(d,this.jobDefaults)),A=(...O)=>new this.Promise(function(Z,Lr){return l(...O,function(...it){return(it[0]!=null?Lr:Z)(it)})}),p=new me(A,n,d,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(O){return typeof c=="function"?c(...O):void 0}).catch(function(O){return Array.isArray(O)?typeof c=="function"?c(...O):void 0:typeof c=="function"?c(O):void 0}),this._receive(p)}schedule(...n){var c,l,p;return typeof n[0]=="function"?([p,...n]=n,l={}):[l,p,...n]=n,c=new me(p,n,l,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(c),c.promise}wrap(n){var c,l;return c=this.schedule.bind(this),l=function(...p){return c(n.bind(this),...p)},l.withOptions=function(p,...d){return c(p,n,...d)},l}async updateSettings(n={}){return await this._store.__updateSettings__(I.overwrite(n,this.storeDefaults)),I.overwrite(n,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return T.default=T,T.Events=ge,T.version=T.prototype.version=Ir.version,T.strategy=T.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},T.BottleneckError=T.prototype.BottleneckError=G,T.Group=T.prototype.Group=Cr,T.RedisConnection=T.prototype.RedisConnection=We,T.IORedisConnection=T.prototype.IORedisConnection=He,T.Batcher=T.prototype.Batcher=Ur,T.prototype.jobDefaults={priority:Ze,weight:1,expiration:null,id:"<no-id>"},T.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:T.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},T.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},T.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},T.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},T.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},T}).call(r);var nt=Xe,xr=nt;return xr})})(Yt);var Ks=Yt.exports;const Xt=Ge(Ks);async function Zt(e,t,r,o){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){const s=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,s,i)}throw r}async function Js(e,t,r,o){const s=new Xt;return s.on("failed",function(i,u){const h=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(o.request.retryCount=u.retryCount+1,h>u.retryCount)return g*e.retryAfterBaseValue}),s.schedule(Qs.bind(null,e,t,r),o)}async function Qs(e,t,r,o){const s=await r(r,o);if(s.data&&s.data.errors&&/Something went wrong while executing your query/.test(s.data.errors[0].message)){const i=new H(s.data.errors[0].message,500,{request:o,response:s});return Zt(e,t,i,o)}return s}var Ys="6.0.1";function er(e,t){const r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",Zt.bind(null,r,e)),e.hook.wrap("request",Js.bind(null,r,e))),{retry:{retryRequest:(o,s,i)=>(o.request.request=Object.assign({},o.request.request,{retries:s,retryAfter:i}),o)}}}er.VERSION=Ys;var Xs="8.0.0",ye=()=>Promise.resolve();function Zs(e,t,r){return e.retryLimiter.schedule(eo,e,t,r)}async function eo(e,t,r){const o=r.method!=="GET"&&r.method!=="HEAD",{pathname:s}=new URL(r.url,"http://github.test"),i=r.method==="GET"&&s.startsWith("/search/"),u=s.startsWith("/graphql"),g=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(o||u)&&await e.write.key(e.id).schedule(g,ye),o&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(g,ye),i&&await e.search.key(e.id).schedule(g,ye);const b=e.global.key(e.id).schedule(g,t,r);if(u){const _=await b;if(_.data.errors!=null&&_.data.errors.some(w=>w.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:_,data:_.data})}return b}var to=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function ro(e){const r=`^(?:${e.map(o=>o.split("/").map(s=>s.startsWith("{")?"(?:.+?)":s).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var _t=ro(to),tr=_t.test.bind(_t),z={},so=function(e,t){z.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),z.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),z.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),z.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function Ue(e,t){const{enabled:r=!0,Bottleneck:o=Xt,id:s="no-id",timeout:i=1e3*60*2,connection:u}=t.throttle||{};if(!r)return{};const h={connection:u,timeout:i};z.global==null&&so(o,h);const g=Object.assign({clustering:u!=null,triggersNotification:tr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:s,...z},t.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const b={},_=new o.Events(b);return b.on("secondary-limit",g.onSecondaryRateLimit),b.on("rate-limit",g.onRateLimit),b.on("error",w=>e.log.warn("Error in throttling-plugin limit handler",w)),g.retryLimiter.on("failed",async function(w,R){const[C,j,U]=R.args,{pathname:G}=new URL(U.url,"http://github.test");if(!(G.startsWith("/graphql")&&w.status!==401||w.status===403))return;const k=~~j.retryCount;j.retryCount=k,U.request.retryCount=k;const{wantRetry:D,retryAfter:Y=0}=await async function(){if(/\bsecondary rate\b/i.test(w.message)){const W=Number(w.response.headers["retry-after"])||C.fallbackSecondaryRateRetryAfter;return{wantRetry:await _.trigger("secondary-limit",W,U,e,k),retryAfter:W}}if(w.response.headers!=null&&w.response.headers["x-ratelimit-remaining"]==="0"){const W=new Date(~~w.response.headers["x-ratelimit-reset"]*1e3).getTime(),X=Math.max(Math.ceil((W-Date.now())/1e3),0);return{wantRetry:await _.trigger("rate-limit",X,U,e,k),retryAfter:X}}return{}}();if(D)return j.retryCount++,Y*C.retryAfterBaseValue}),e.hook.wrap("request",Zs.bind(null,g)),{}}Ue.VERSION=Xs;Ue.triggersNotification=tr;const oo=J($r);var no=function(t){return btoa(t)};const q=Ge(no),io="4.0.0";function ao(e){const t=e.clientType||"oauth-app",r=e.baseUrl||"https://github.com",o={clientType:t,allowSignup:e.allowSignup!==!1,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if(t==="oauth-app"){const s="scopes"in e?e.scopes:[];o.scopes=typeof s=="string"?s.split(/[,\s]+/).filter(Boolean):s}return o.url=co(`${r}/login/oauth/authorize`,o),o}function co(e,t){const r={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"};let o=e;return Object.keys(r).filter(s=>t[s]!==null).filter(s=>s!=="scopes"?!0:t.clientType==="github-app"?!1:!Array.isArray(t[s])||t[s].length>0).map(s=>[r[s],`${t[s]}`]).forEach(([s,i],u)=>{o+=u===0?"?":"&",o+=`${s}=${encodeURIComponent(i)}`}),o}function rr(e){const t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}async function ce(e,t,r){const o={baseUrl:rr(e),headers:{accept:"application/json"},...r},s=await e(t,o);if("error"in s.data){const i=new H(`${s.data.error_description} (${s.data.error}, ${s.data.error_uri})`,400,{request:e.endpoint.merge(t,o),headers:s.headers});throw i.response=s,i}return s}function uo({request:e=P,...t}){const r=rr(e);return ao({...t,baseUrl:r})}async function sr(e){const t=e.request||P,r=await ce(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if(e.clientType==="github-app"){if("refresh_token"in r.data){const s=new Date(r.headers.date).getTime();o.refreshToken=r.data.refresh_token,o.expiresAt=Et(s,r.data.expires_in),o.refreshTokenExpiresAt=Et(s,r.data.refresh_token_expires_in)}delete o.scopes}return{...r,authentication:o}}function Et(e,t){return new Date(e+t*1e3).toISOString()}async function or(e){const t=e.request||P,r={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(r.scope=e.scopes.join(" ")),ce(t,"POST /login/device/code",r)}async function Se(e){const t=e.request||P,r=await ce(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),o={clientType:e.clientType,clientId:e.clientId,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(o.clientSecret=e.clientSecret),e.clientType==="github-app"){if("refresh_token"in r.data){const s=new Date(r.headers.date).getTime();o.refreshToken=r.data.refresh_token,o.expiresAt=bt(s,r.data.expires_in),o.refreshTokenExpiresAt=bt(s,r.data.refresh_token_expires_in)}delete o.scopes}return{...r,authentication:o}}function bt(e,t){return new Date(e+t*1e3).toISOString()}async function nr(e){const r=await(e.request||P)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${q(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:r.data.scopes};return r.data.expires_at&&(o.expiresAt=r.data.expires_at),e.clientType==="github-app"&&delete o.scopes,{...r,authentication:o}}async function ir(e){const t=e.request||P,r=await ce(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),o=new Date(r.headers.date).getTime(),s={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,refreshToken:r.data.refresh_token,expiresAt:wt(o,r.data.expires_in),refreshTokenExpiresAt:wt(o,r.data.refresh_token_expires_in)};return{...r,authentication:s}}function wt(e,t){return new Date(e+t*1e3).toISOString()}async function lo(e){const{request:t,clientType:r,clientId:o,clientSecret:s,token:i,...u}=e,g=await(t||P)("POST /applications/{client_id}/token/scoped",{headers:{authorization:`basic ${q(`${o}:${s}`)}`},client_id:o,access_token:i,...u}),b=Object.assign({clientType:r,clientId:o,clientSecret:s,token:g.data.token},g.data.expires_at?{expiresAt:g.data.expires_at}:{});return{...g,authentication:b}}async function ar(e){const t=e.request||P,r=q(`${e.clientId}:${e.clientSecret}`),o=await t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:o.data.token,scopes:o.data.scopes};return o.data.expires_at&&(s.expiresAt=o.data.expires_at),e.clientType==="github-app"&&delete s.scopes,{...o,authentication:s}}async function cr(e){const t=e.request||P,r=q(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}async function ur(e){const t=e.request||P,r=q(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})}const po=Object.freeze(Object.defineProperty({__proto__:null,VERSION:io,checkToken:nr,createDeviceCode:or,deleteAuthorization:ur,deleteToken:cr,exchangeDeviceCode:Se,exchangeWebFlowCode:sr,getWebFlowAuthorizationUrl:uo,refreshToken:ir,resetToken:ar,scopeToken:lo},Symbol.toStringTag,{value:"Module"}));async function lr(e,t){const r=ho(e,t.auth);if(r)return r;const{data:o}=await or({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});await e.onVerification(o);const s=await Ae(t.request||e.request,e.clientId,e.clientType,o);return e.authentication=s,s}function ho(e,t){if(t.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;const r=e.authentication,o=("scopes"in t&&t.scopes||e.scopes).join(" "),s=r.scopes.join(" ");return o===s?r:!1}async function yt(e){await new Promise(t=>setTimeout(t,e*1e3))}async function Ae(e,t,r,o){try{const s={clientId:t,request:e,code:o.device_code},{authentication:i}=r==="oauth-app"?await Se({...s,clientType:"oauth-app"}):await Se({...s,clientType:"github-app"});return{type:"token",tokenType:"oauth",...i}}catch(s){if(!s.response)throw s;const i=s.response.data.error;if(i==="authorization_pending")return await yt(o.interval),Ae(e,t,r,o);if(i==="slow_down")return await yt(o.interval+5),Ae(e,t,r,o);throw s}}async function go(e,t){return lr(e,{auth:t})}async function mo(e,t,r,o){let s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);const{token:i}=await lr(e,{request:t,auth:{type:"oauth"}});return s.headers.authorization=`token ${i}`,t(s)}var fo="6.0.1";function To(e){const t=e.request||P.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${fo} ${$()}`}}),{request:r=t,...o}=e,s=e.clientType==="github-app"?{...o,clientType:"github-app",request:r}:{...o,clientType:"oauth-app",request:r,scopes:e.scopes||[]};if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(go.bind(null,s),{hook:mo.bind(null,s)})}var pr="4.0.1";async function vt(e){if("code"in e.strategyOptions){const{authentication:t}=await sr({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request});return{type:"token",tokenType:"oauth",...t}}if("onVerification"in e.strategyOptions){const r=await To({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated,...e.strategyOptions,request:e.request})({type:"oauth"});return{clientSecret:e.clientSecret,...r}}if("token"in e.strategyOptions)return{type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated,...e.strategyOptions};throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")}async function Oe(e,t={}){var o,s;if(e.authentication||(e.authentication=e.clientType==="oauth-app"?await vt(e):await vt(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");const r=e.authentication;if("expiresAt"in r&&(t.type==="refresh"||new Date(r.expiresAt)<new Date)){const{authentication:i}=await ir({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:r.refreshToken,request:e.request});e.authentication={tokenType:"oauth",type:"token",...i}}if(t.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!r.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");await((o=e.onTokenCreated)==null?void 0:o.call(e,e.authentication,{type:t.type}))}if(t.type==="check"||t.type==="reset"){const i=t.type==="check"?nr:ar;try{const{authentication:u}=await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication={tokenType:"oauth",type:"token",...u},t.type==="reset"&&await((s=e.onTokenCreated)==null?void 0:s.call(e,e.authentication,{type:t.type})),e.authentication}catch(u){throw u.status===404&&(u.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),u}}if(t.type==="delete"||t.type==="deleteAuthorization"){const i=t.type==="delete"?cr:ur;try{await i({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(u){if(u.status!==404)throw u}return e.authentication.invalid=!0,e.authentication}return e.authentication}var _o=/\/applications\/[^/]+\/(token|grant)s?/;function De(e){return e&&_o.test(e)}async function Eo(e,t,r,o={}){const s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);if(De(s.url)){const u=q(`${e.clientId}:${e.clientSecret}`);return s.headers.authorization=`basic ${u}`,t(s)}const{token:i}=e.clientType==="oauth-app"?await Oe({...e,request:t}):await Oe({...e,request:t});return s.headers.authorization="token "+i,t(s)}function se({clientId:e,clientSecret:t,clientType:r="oauth-app",request:o=P.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${pr} ${$()}`}}),onTokenCreated:s,...i}){const u=Object.assign({clientType:r,clientId:e,clientSecret:t,onTokenCreated:s,strategyOptions:i,request:o});return Object.assign(Oe.bind(null,u),{hook:Eo.bind(null,u)})}se.VERSION=pr;const bo=Object.freeze(Object.defineProperty({__proto__:null,createOAuthUserAuth:se,requiresBasicAuth:De},Symbol.toStringTag,{value:"Module"}));async function wo(e,t){if(t.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${q(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){const{type:s,...i}={...t,...e};return t.factory(i)}const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.request,...t};return(e.clientType==="oauth-app"?await se({...r,clientType:e.clientType}):await se({...r,clientType:e.clientType}))()}async function yo(e,t,r,o){let s=t.endpoint.merge(r,o);if(/\/login\/(oauth\/access_token|device\/code)$/.test(s.url))return t(s);if(e.clientType==="github-app"&&!De(s.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${s.method} ${s.url}" is not supported.`);const i=q(`${e.clientId}:${e.clientSecret}`);s.headers.authorization=`basic ${i}`;try{return await t(s)}catch(u){throw u.status!==401||(u.message=`[@octokit/auth-oauth-app] "${s.method} ${s.url}" does not support clientId/clientSecret basic authentication.`),u}}var vo="7.0.1";function ko(e){const t=Object.assign({request:P.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${vo} ${$()}`}}),clientType:"oauth-app"},e);return Object.assign(wo.bind(null,t),{hook:yo.bind(null,t)})}const So=Object.freeze(Object.defineProperty({__proto__:null,createOAuthAppAuth:ko,createOAuthUserAuth:se},Symbol.toStringTag,{value:"Module"})),dr=J(So),ue=J(bo),Ao=J(Gs),B=J(po);async function Oo(e){return{type:"unauthenticated",reason:e}}function Po(e){return e.status!==403||!e.response?!1:e.response.headers["x-ratelimit-remaining"]==="0"}var Go=/\babuse\b/i;function Ro(e){return e.status!==403?!1:Go.test(e.message)}async function Fo(e,t,r,o){const s=t.endpoint.merge(r,o);return t(s).catch(i=>{throw i.status===404?(i.message=`Not found. May be due to lack of authentication. Reason: ${e}`,i):Po(i)?(i.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,i):Ro(i)?(i.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,i):i.status===401?(i.message=`Unauthorized. "${s.method} ${s.url}" failed most likely due to lack of authentication. Reason: ${e}`,i):(i.status>=400&&i.status<500&&(i.message=i.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),i)})}var Co=function(t){if(!t||!t.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(Oo.bind(null,t.reason),{hook:Fo.bind(null,t.reason)})};const Uo=Object.freeze(Object.defineProperty({__proto__:null,createUnauthenticatedAuth:Co},Symbol.toStringTag,{value:"Module"})),hr=J(Uo);var Do=Object.create,le=Object.defineProperty,Io=Object.getOwnPropertyDescriptor,xo=Object.getOwnPropertyNames,Lo=Object.getPrototypeOf,jo=Object.prototype.hasOwnProperty,$o=(e,t)=>{for(var r in t)le(e,r,{get:t[r],enumerable:!0})},gr=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of xo(t))!jo.call(e,s)&&s!==r&&le(e,s,{get:()=>t[s],enumerable:!(o=Io(t,s))||o.enumerable});return e},N=(e,t,r)=>(r=e!=null?Do(Lo(e)):{},gr(t||!e||!e.__esModule?le(r,"default",{value:e,enumerable:!0}):r,e)),qo=e=>gr(le({},"__esModule",{value:!0}),e),mr={};$o(mr,{OAuthApp:()=>En,createAWSLambdaAPIGatewayV2Handler:()=>_n,createNodeMiddleware:()=>dn,createWebWorkerHandler:()=>mn,handleRequest:()=>pe,sendNodeResponse:()=>Er,unknownRouteResponse:()=>_r});var No=qo(mr),Wo=dr,fr="6.0.0";function Tr(e,t,r){if(Array.isArray(t)){for(const o of t)Tr(e,o,r);return}e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(r)}var Ho=Ao,Bo=oo,Mo=Ho.Octokit.defaults({userAgent:`octokit-oauth-app.js/${fr} ${(0,Bo.getUserAgent)()}`}),Vo=ue;async function x(e,t){const{name:r,action:o}=t;if(e.eventHandlers[`${r}.${o}`])for(const s of e.eventHandlers[`${r}.${o}`])await s(t);if(e.eventHandlers[r])for(const s of e.eventHandlers[r])await s(t)}async function zo(e,t){return e.octokit.auth({type:"oauth-user",...t,async factory(r){const o=new e.Octokit({authStrategy:Vo.createOAuthUserAuth,auth:r}),s=await o.auth({type:"get"});return await x(e,{name:"token",action:"created",token:s.token,scopes:s.scopes,authentication:s,octokit:o}),o}})}var Ko=N(B);function Jo(e,t){const r={clientId:e.clientId,request:e.octokit.request,...t,allowSignup:e.allowSignup??t.allowSignup,redirectUrl:t.redirectUrl??e.redirectUrl,scopes:t.scopes??e.defaultScopes};return Ko.getWebFlowAuthorizationUrl({clientType:e.clientType,...r})}var Qo=N(dr);async function Yo(e,t){const r=await e.octokit.auth({type:"oauth-user",...t});return await x(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:new e.Octokit({authStrategy:Qo.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.token,scopes:r.scopes,refreshToken:r.refreshToken,expiresAt:r.expiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}})}),{authentication:r}}var Xo=N(B);async function Zo(e,t){const r=await Xo.checkToken({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t});return Object.assign(r.authentication,{type:"token",tokenType:"oauth"}),r}var kt=N(B),St=ue;async function en(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t};if(e.clientType==="oauth-app"){const i=await kt.resetToken({clientType:"oauth-app",...r}),u=Object.assign(i.authentication,{type:"token",tokenType:"oauth"});return await x(e,{name:"token",action:"reset",token:i.authentication.token,scopes:i.authentication.scopes||void 0,authentication:u,octokit:new e.Octokit({authStrategy:St.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:i.authentication.token,scopes:i.authentication.scopes}})}),{...i,authentication:u}}const o=await kt.resetToken({clientType:"github-app",...r}),s=Object.assign(o.authentication,{type:"token",tokenType:"oauth"});return await x(e,{name:"token",action:"reset",token:o.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:St.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:o.authentication.token}})}),{...o,authentication:s}}var tn=N(B),rn=ue;async function sn(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");const r=await tn.refreshToken({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await x(e,{name:"token",action:"refreshed",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:rn.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}var on=N(B),nn=ue;async function an(e,t){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");const r=await on.scopeToken({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t}),o=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return await x(e,{name:"token",action:"scoped",token:r.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:nn.createOAuthUserAuth,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),{...r,authentication:o}}var At=N(B),cn=hr;async function un(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},o=e.clientType==="oauth-app"?await At.deleteToken({clientType:"oauth-app",...r}):await At.deleteToken({clientType:"github-app",...r});return await x(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:cn.createUnauthenticatedAuth,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),o}var Ot=N(B),Pt=hr;async function ln(e,t){const r={clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,...t},o=e.clientType==="oauth-app"?await Ot.deleteAuthorization({clientType:"oauth-app",...r}):await Ot.deleteAuthorization({clientType:"github-app",...r});return await x(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Pt.createUnauthenticatedAuth,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),await x(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:Pt.createUnauthenticatedAuth,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),o}function _r(e){return{status:404,headers:{"content-type":"application/json"},text:JSON.stringify({error:`Unknown route: ${e.method} ${e.url}`})}}async function pe(e,{pathPrefix:t="/api/github/oauth"},r){var _,w,R,C,j,U;if(r.method==="OPTIONS")return{status:200,headers:{"access-control-allow-origin":"*","access-control-allow-methods":"*","access-control-allow-headers":"Content-Type, User-Agent, Authorization"}};let{pathname:o}=new URL(r.url,"http://localhost");if(!o.startsWith(`${t}/`))return;o=o.slice(t.length+1);const s=[r.method,o].join(" "),i={getLogin:"GET login",getCallback:"GET callback",createToken:"POST token",getToken:"GET token",patchToken:"PATCH token",patchRefreshToken:"PATCH refresh-token",scopeToken:"POST token/scoped",deleteToken:"DELETE token",deleteGrant:"DELETE grant"};if(!Object.values(i).includes(s))return _r(r);let u;try{const G=await r.text();u=G?JSON.parse(G):{}}catch{return{status:400,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify({error:"[@octokit/oauth-app] request error"})}}const{searchParams:h}=new URL(r.url,"http://localhost"),g=Object.fromEntries(h),b=r.headers;try{if(s===i.getLogin){const{url:v}=e.getWebFlowAuthorizationUrl({state:g.state,scopes:g.scopes?g.scopes.split(","):void 0,allowSignup:g.allowSignup?g.allowSignup==="true":void 0,redirectUrl:g.redirectUrl});return{status:302,headers:{location:v}}}if(s===i.getCallback){if(g.error)throw new Error(`[@octokit/oauth-app] ${g.error} ${g.error_description}`);if(!g.code)throw new Error('[@octokit/oauth-app] "code" parameter is required');const{authentication:{token:v}}=await e.createToken({code:g.code});return{status:200,headers:{"content-type":"text/html"},text:`<h1>Token created successfully</h1>

<p>Your token is: <strong>${v}</strong>. Copy it now as it cannot be shown again.</p>`}}if(s===i.createToken){const{code:v,redirectUrl:k}=u;if(!v)throw new Error('[@octokit/oauth-app] "code" parameter is required');const D=await e.createToken({code:v,redirectUrl:k});return delete D.authentication.clientSecret,{status:201,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(D)}}if(s===i.getToken){const v=(_=b.authorization)==null?void 0:_.substr(6);if(!v)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const k=await e.checkToken({token:v});return delete k.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(k)}}if(s===i.patchToken){const v=(w=b.authorization)==null?void 0:w.substr(6);if(!v)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const k=await e.resetToken({token:v});return delete k.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(k)}}if(s===i.patchRefreshToken){if(!((R=b.authorization)==null?void 0:R.substr(6)))throw new Error('[@octokit/oauth-app] "Authorization" header is required');const{refreshToken:k}=u;if(!k)throw new Error("[@octokit/oauth-app] refreshToken must be sent in request body");const D=await e.refreshToken({refreshToken:k});return delete D.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(D)}}if(s===i.scopeToken){const v=(C=b.authorization)==null?void 0:C.substr(6);if(!v)throw new Error('[@octokit/oauth-app] "Authorization" header is required');const k=await e.scopeToken({token:v,...u});return delete k.authentication.clientSecret,{status:200,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify(k)}}if(s===i.deleteToken){const v=(j=b.authorization)==null?void 0:j.substr(6);if(!v)throw new Error('[@octokit/oauth-app] "Authorization" header is required');return await e.deleteToken({token:v}),{status:204,headers:{"access-control-allow-origin":"*"}}}const G=(U=b.authorization)==null?void 0:U.substr(6);if(!G)throw new Error('[@octokit/oauth-app] "Authorization" header is required');return await e.deleteAuthorization({token:G}),{status:204,headers:{"access-control-allow-origin":"*"}}}catch(G){return{status:400,headers:{"content-type":"application/json","access-control-allow-origin":"*"},text:JSON.stringify({error:G.message})}}}function pn(e){const{method:t,url:r,headers:o}=e;async function s(){return await new Promise((u,h)=>{let g=[];e.on("error",h).on("data",b=>g.push(b)).on("end",()=>u(Buffer.concat(g).toString()))})}return{method:t,url:r,headers:o,text:s}}function Er(e,t){t.writeHead(e.status,e.headers),t.end(e.text)}function dn(e,t={}){return async function(r,o,s){const i=await pn(r),u=await pe(e,t,i);return u?(Er(u,o),!0):(s==null||s(),!1)}}function hn(e){const t=Object.fromEntries(e.headers.entries());return{method:e.method,url:e.url,headers:t,text:()=>e.text()}}function gn(e){return new Response(e.text,{status:e.status,headers:e.headers})}function mn(e,t={}){return async function(r){const o=await hn(r),s=await pe(e,t,o);return s?gn(s):void 0}}function fn(e){const{method:t}=e.requestContext.http;let r=e.rawPath;const{stage:o}=e.requestContext;r.startsWith("/"+o)&&(r=r.substring(o.length+1)),e.rawQueryString&&(r+="?"+e.rawQueryString);const s=e.headers;return{method:t,url:r,headers:s,text:async()=>e.body||""}}function Tn(e){return{statusCode:e.status,headers:e.headers,body:e.text}}function _n(e,t={}){return async function(r){const o=fn(r),s=await pe(e,t,o);return s?Tn(s):void 0}}var oe,En=(oe=class{static defaults(t){return class extends this{constructor(...o){super({...t,...o[0]})}}}constructor(t){const r=t.Octokit||Mo;this.type=t.clientType||"oauth-app";const o=new r({authStrategy:Wo.createOAuthAppAuth,auth:{clientType:this.type,clientId:t.clientId,clientSecret:t.clientSecret}}),s={clientType:this.type,clientId:t.clientId,clientSecret:t.clientSecret,defaultScopes:t.defaultScopes||[],allowSignup:t.allowSignup,baseUrl:t.baseUrl,redirectUrl:t.redirectUrl,log:t.log,Octokit:r,octokit:o,eventHandlers:{}};this.on=Tr.bind(null,s),this.octokit=o,this.getUserOctokit=zo.bind(null,s),this.getWebFlowAuthorizationUrl=Jo.bind(null,s),this.createToken=Yo.bind(null,s),this.checkToken=Zo.bind(null,s),this.resetToken=en.bind(null,s),this.refreshToken=sn.bind(null,s),this.scopeToken=an.bind(null,s),this.deleteToken=un.bind(null,s),this.deleteAuthorization=ln.bind(null,s)}},oe.VERSION=fr,oe),bn="3.1.1",Ie=Wt.plugin(Qt,Mt,Ns,er,Ue).defaults({userAgent:`octokit.js/${bn}`,throttle:{onRateLimit:wn,onSecondaryRateLimit:yn}});function wn(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function yn(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}No.OAuthApp.defaults({Octokit:Ie});async function br(){if(!E.githubToken||!E.gistId)return!1;const t=await new Ie({auth:E.githubToken}).request("GET /gists/{gist_id}",{gist_id:E.gistId,headers:{"X-GitHub-Api-Version":"2022-11-28"}});return t.status!==200?(console.error(t.status,t),!1):(yr(t),!0)}async function vn(e,t){const r=[t,...E.experimentList.filter(o=>o.id!==e)];return wr(r)}async function kn(e){const t=E.experimentList.filter(r=>r.id!==e);return wr(t)}async function wr(e){if(!E.githubToken||!E.gistId)return!1;const r=await new Ie({auth:E.githubToken}).request("PATCH /gists/{gist_id}",{gist_id:E.gistId,description:"pp_exp typescript package to include as dependency in your project.",files:{...E.gistFiles,"experiments.json":{content:JSON.stringify({experiments:e},null,2)}},headers:{"X-GitHub-Api-Version":"2022-11-28"}});return r.status!==200?(console.error(r.status,r),!1):(yr(r),!0)}function yr(e){var t,r;if((r=(t=e.data.files)==null?void 0:t["experiments.json"])!=null&&r.content)try{const o=JSON.parse(e.data.files["experiments.json"].content);E.experimentList=o.experiments,console.log({experimentList:E.experimentList})}catch(o){console.error(o)}}function Sn(){const e=E.experimentList.find(r=>r.id===E.experimentId),t={name:f("input",{id:"exp_name",className:"input"})((e==null?void 0:e.name)??""),url:f("input",{id:"exp_url",className:"input"})((e==null?void 0:e.url)??""),id:f("input",{id:"exp_id",className:"input"})((e==null?void 0:e.id)??"")};return f("div",{className:"flex flex-col px-16 py-8 space-y-8 bg-stone-100 min-w-[512px]"})(f("div",{className:"flex flex-col"})(f("label",{htmlFor:"exp_name",className:"font-bold"})("Name"),t.name),f("div",{className:"flex flex-col"})(f("label",{htmlFor:"exp_url",className:"font-bold"})("URL"),t.url),f("div",{className:"flex flex-col"})(f("label",{htmlFor:"exp_id",className:"font-bold"})("Analytics ID"),t.id),E.experimentId?f("button",{className:"btn-primary",onclick:()=>L(S.ExperimentBuilder,E.experimentId??"")})("Edit Variants"):void 0,f("button",{className:"btn-success",onclick:()=>An(e,t)})("Save"),f("button",{className:"btn-danger",onclick:()=>confirm("Are you sure to delete this experiment?")&&On()})("Delete"),f("button",{className:"btn-secondary",onclick:()=>L(S.ExperimentList)})("Back"))}async function An(e,t){if(!t.name.value||!t.url.value||!t.id.value){alert("Please fill all the fields!");return}const r=e?{...e,name:t.name.value,url:t.url.value,id:t.id.value}:{name:t.name.value,url:t.url.value,id:t.id.value,variants:[]},o=await vn(e==null?void 0:e.id,r);alert(o?"Experiment saved!":"Failed to save experiment!")}async function On(){if(!E.experimentId)return;await kn(E.experimentId)?L(S.ExperimentList):alert("Failed to delete experiment!")}function Pn(){return f("div",{className:"flex flex-col space-y-8"})(...E.experimentList.map(Gn),f("button",{className:"btn-primary my-4",onclick:()=>L(S.ExperimentConfig)})("Create New Experiment"))}function Gn(e){return f("div",{className:"flex flex-col px-16 py-8 space-y-4 bg-stone-200 border-8 border-stone-300 rounded-lg shadow cursor-pointer hover:invert",onclick:()=>L(S.ExperimentConfig,e.id)})(f("h2",{className:"text-xl font-medium"})(e.name),f("p",{className:"text-lg"})(e.url),f("p",{className:"text-sm"})("id: "+e.id))}const vr={localStorageKey:"pp_exp_app:data"};function Rn(){const e={githubToken:f("input",{id:"github_token",className:"input"})(E.githubToken??""),gistId:f("input",{id:"gist_id",className:"input"})(E.gistId??"")};return f("div",{className:"flex flex-col container px-16 py-8 space-y-8 bg-stone-100"})(f("p",{className:"text-center"})(f("span")("Please enter a GitHub Personal Access Token and a Gist ID to manage the gist through the "),f("a",{href:"https://docs.github.com/en/rest/gists/gists",className:"text-blue-600 visited:text-purple-600"})("GitHub REST API"),f("span")(".")),f("div",{className:"flex flex-col"})(f("label",{htmlFor:"github_token",className:"font-bold"})("GitHub Personal Access Token"),e.githubToken),f("div",{className:"flex flex-col"})(f("label",{htmlFor:"gist_id",className:"font-bold"})("Gist ID"),e.gistId),f("button",{className:"btn-success",onclick:()=>Fn(e)})("Save and Sync"))}async function Fn(e){if(E.githubToken=e.githubToken.value,E.gistId=e.gistId.value,!E.githubToken||!E.gistId){alert("Please fill all the fields!");return}await br()&&(localStorage.setItem(vr.localStorageKey,JSON.stringify({githubToken:E.githubToken,gistId:E.gistId})),alert("Successfully synced with remote gist!"))}const kr={[S.ExperimentList]:{route:"/",pattern:/^\/$/},[S.Settings]:{route:"/settings",pattern:/^\/settings\/?$/},[S.ExperimentConfig]:{route:"/experiment-config",pattern:/^\/experiment-config\/?(?<experimentId>\w+)?\/?$/},[S.ExperimentBuilder]:{route:"/experiment-builder",pattern:/^\/experiment-builder\/(?<experimentId>\w+)\/?$/},[S.NotFound]:{route:"/404",pattern:/^\/404\/?$/}};function L(e,...t){history.pushState({},"",`${kr[e].route}${t.length?"/":""}${t.join("/")}`),Pe()}function Cn(){if(window.addEventListener("popstate",Pe),!E.githubToken||!E.gistId){L(S.Settings);return}Pe()}function Pe(){var t,r;const e=Object.entries(kr).find(([o,{pattern:s}])=>s.test(location.pathname));e?(E.page=e[0],E.experimentId=((r=(t=e[1].pattern.exec(location.pathname))==null?void 0:t.groups)==null?void 0:r.experimentId)??null):E.page=S.NotFound,Sr()}function Sr(){switch(E.page){case S.ExperimentList:return F.headerTitle.textContent="Experiments",F.pageContainer.replaceContent(Pn());case S.Settings:return F.headerTitle.textContent="Settings",F.pageContainer.replaceContent(Rn());case S.ExperimentConfig:return F.headerTitle.textContent=E.experimentId?"Experiment Edition":"New Experiment",F.pageContainer.replaceContent(Sn());case S.ExperimentBuilder:return F.headerTitle.textContent="Experiment Builder",F.pageContainer.replaceContent(jr());case S.NotFound:default:return F.headerTitle.textContent="404",F.pageContainer.replaceContent("Not Found")}}function Un(){return f("div",{className:"sticky top-0 flex justify-between items-center	w-full px-16 py-4 bg-stone-100"})(f("span",{className:"text-2xl font-black"})("PP Exp"),F.headerTitle,f("div",{className:"flex space-x-4"})(f("button",{className:"px-4 py-2 border bg-white hover:invert",onclick:()=>L(S.ExperimentList)})("Experiments"),f("button",{className:"px-4 py-2 border bg-white hover:invert",onclick:()=>L(S.Settings)})("Settings")))}(function(){var t;(t=document.getElementById("root"))==null||t.appendChild(Dn()),In(),Cn(),br().then(()=>Sr()),xn()})();function Dn(){return f("div",{className:"flex flex-col items-center w-full"})(Un(),F.pageContainer)}function In(){const e=localStorage.getItem(vr.localStorageKey);if(!e)return null;try{const t=JSON.parse(e);return E.githubToken=t.githubToken,E.gistId=t.gistId,t}catch{return null}}async function xn(){try{const e=await fetch("/gist-template/package.json");E.gistFiles["package.json"]={content:await e.text()};const t=await fetch("/gist-template/types.ts");E.gistFiles["types.ts"]={content:await t.text()};const r=await fetch("/gist-template/pp_exp.ts");E.gistFiles["pp_exp.ts"]={content:await r.text()},console.log({gistFiles:E.gistFiles})}catch(e){console.error(e),alert("Failed to load gist template files! error logged to console.")}}
